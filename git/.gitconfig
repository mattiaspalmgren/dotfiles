[user]
	name = Mattias Palmgren
	email = mattiaspalmgren92@gmail.com

[credential]
	helper = osxkeychain

[core]
	excludesfile = /Users/mattiaspalmgren/.gitignore_global
	ignorecase = false

[mergetool]
       keepBackup = false

[merge]
	tool = opendiff

[pull]
	rebase = true

[includeIf "gitdir:~/alva/"]
	path = .gitconfig-alva

[alias]
	rb = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git rebase -i `echo ${HASH} | awk '{ print $1 }'`^
	rf = !FILE=`git status --short | awk '{ print $2 }' | fzf` && git checkout ${FILE}
	sh = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git show `echo ${HASH} | awk '{ print $1 }'`
	di = !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && git diff ${FILES}
	fe = "!git fetch"
	co = !NAME=`git branch -r | head -n 50 | fzf` && git checkout --track `echo ${NAME} | awk '{ print $1 }'`
	rev = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git revert `echo ${HASH} | awk '{ print $1 }'`
	hash = !HASH=`git log --pretty=oneline | head -n 300 | fzf` && printf ${HASH} | awk '{ printf $1 }' | pbcopy
	po = !NAME=`git stash list | fzf | awk '{ print substr($1, 1, length($1)-1) }'` && git stash pop ${NAME}
	app = !STASH=`git stash list | fzf | awk '{ print $1 }' | sed 's/://'` && git stash apply ${STASH}
	can = !git commit --amend --no-edit
	ca = !git commit --amend
	sw = !BRANCH=`git branch | head -n 50 | fzf` && git switch `echo ${BRANCH} | awk '{ print $1 }'`
	dbra = !BRANCH=`git branch | head -n 50 | fzf` && git branch `echo ${BRANCH} | awk '{ print $1 }'` -D
	dtag = !TAG=`git tag --list | tail | fzf` && git tag -d ${TAG}
	drtag = !TAG=`git tag --list | tail | fzf` && git push origin :refs/tags/${TAG}
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	publish = "!git push -u origin $(git branch-name)"
	af = !zsh -c 'source $DOTFILES_SHELL_DIR/functions.sh && add-file'
	afp = !zsh -c 'source $DOTFILES_SHELL_DIR/functions.sh && add-file -p'
	browse = !zsh -c 'source $DOTFILES_SHELL_DIR/functions.sh && browse-log'
	message = !HASH=`git log --pretty=oneline | head -n 300 | fzf` && git show --no-patch --format=%B `echo ${HASH} | awk '{ print $1 }'` | pbcopy
	merge-commits = "!funct() { git log --merges --reverse --oneline --ancestry-path $1..origin | grep 'Merge pull request';  }; funct"
	pr-number = "!funct() { git merge-commits $1 | head -n1 | sed -n 's/^.*Merge pull request #\\s*\\([0-9]*\\).*$/\\1/p'; }; funct"
	web-url = "!funct() { git config remote.origin.url | sed -e\"s/git@/https:\\/\\//\" -e\"s/\\.git$//\" | sed -E \"s/(\\/\\/[^:]*):/\\1\\//\"; }; funct"
	pr = "!funct() { open \"`git web-url`/pull/`git pr-number $1`\" ;}; funct"
	size = !SIZE=`git diff master..HEAD --stat | tail -1` && echo ${SIZE}

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[init]
	defaultBranch = main

[rebase]
	autostash = true

[remote "origin"]
	prune = true
