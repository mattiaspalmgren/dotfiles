<templateSet group="user">
  <template name="rcomp" value="import React from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;export const $ComponentName$ = (props) =&gt; {&#10;    const { id } = props;&#10;&#10;    return (&#10;        &lt;&gt;{id}&lt;/&gt;&#10;    );&#10;};&#10;&#10;$ComponentName$.propTypes = {&#10;    id: PropTypes.number.isRequired&#10;};&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="ES6_TOP_LEVEL_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="backfill" value="import asyncio&#10;import os&#10;&#10;&#10;async def $FILE_NAME$():&#10;    pass&#10;&#10;&#10;async def main():&#10;    environment = 'local'&#10;    os.environ['ENVIRONMENT'] = environment&#10;    config = get_config()&#10;    coroutines = [$FILE_NAME$()]&#10;    await asyncio.gather(*coroutines)&#10;&#10;&#10;if __name__ == '__main__':&#10;    loop = asyncio.get_event_loop()&#10;    loop.run_until_complete(main())" description="Boilerplate for backfill script" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="acla" value="import abc&#10;&#10;&#10;class $FILE_NAME$(metaclass=abc.ABCMeta):&#10;    @abc.abstractmethod&#10;    async def $FILE_NAME_SNAKE_CASE$(self):&#10;        raise NotImplementedError&#10;&#10;&#10;__all__ = [&#10;    '$FILE_NAME$'&#10;]&#10;" description="Create an abstract custom class" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_NAME_SNAKE_CASE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="cla" value="import logging&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;&#10;class $FILE_NAME$:&#10;    def __init__(self):&#10;        pass&#10;        &#10;        &#10;__all__ = [&#10;    '$FILE_NAME$'&#10;]&#10;" description="Create a custom class" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ates" value="import pytest&#10;&#10;&#10;@pytest.mark.asyncio&#10;async def $FILE_NAME$():&#10;    # given&#10;    pass&#10;    &#10;    # when&#10;&#10;    # then&#10;" description="Create a new async custom test" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dcla" value="from dataclasses import dataclass&#10;&#10;&#10;@dataclass(frozen=True)&#10;class $FILE_NAME$:&#10;    id: str&#10;    &#10;&#10;__all__ = [&#10;    '$FILE_NAME$'&#10;]&#10;" description="Create a custom dataclass" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="routes" value="from sanic import Blueprint&#10;from sanic.request import Request&#10;&#10;from src.infrastructure.endpoints.subscriptions.decorators import require_oidc_token&#10;from src.infrastructure.endpoints.utils import create_response&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;$CAPITAL_VAR$_ROUTES = Blueprint('$DOMAIN$_api', url_prefix='/v1')&#10;&#10;&#10;@$CAPITAL_VAR$_ROUTES.route('/$DOMAIN$.$VAR$', methods=['POST'])&#10;@require_oidc_token&#10;async def _handle_$VAR$(request: Request):&#10;    logger.info('Received request to avla')&#10;    $VAR$_service = get_$VAR$_service_from_app(request.app)&#10;&#10;    try:&#10;        command = parse_$VAR$_command(request.json)&#10;        logger.info('Parsed AlvaCommand command: %s', command)&#10;        $DOMAIN$ = $VAR$_service.$VAR$()&#10;        logger.info('Successfully $VAR$ed with id %s', {})&#10;        return create_response(convert_$DOMAIN$_to_dict($DOMAIN$))&#10;    except InvalidRequestBody as e:&#10;        logger.warning('Failed to parse payload to $VAR$: %s', e, exc_info=True)&#10;        return create_response(error_code=e.error_code, message='Failed to parse payload', status_code=400)&#10;&#10;__all__ = [&#10;    '$CAPITAL_VAR$_ROUTES'&#10;]&#10;" description="Create cusom route" toReformat="false" toShortenFQNames="true">
    <variable name="CAPITAL_VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DOMAIN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="evport" value="import abc&#10;&#10;&#10;class $FILE_NAME_CAMELCASE$Port(metaclass=abc.ABCMeta):&#10;    @abc.abstractmethod&#10;    async def publish_$EVENT$event(self, event: $EVENT_CAMELCASE$):&#10;        raise NotImplementedError&#10;&#10;&#10;__all__ = [&#10;    '$FILE_NAME_CAMELCASE$Port'&#10;]&#10;" description="Create custom event port" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME_CAMELCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="substringBefore(fileNameWithoutExtension(),&quot;events&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT_CAMELCASE" expression="capitalize(camelCase(substringBefore(fileNameWithoutExtension(),&quot;events&quot;)))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="topr" value="from build.generated.$EVENT_NAME$_pb2 import (&#10;    $EVENT_NAME_CAMEL_CASE$ as Proto$EVENT_NAME_CAMEL_CASE$&#10;)&#10;&#10;# pylint: disable=no-member&#10;&#10;&#10;def convert_$EVENT_NAME$_event_to_proto(event: $EVENT_NAME_CAMEL_CASE$):&#10;    proto_event = Proto$EVENT_NAME_CAMEL_CASE$()&#10;    proto_event.data.updated_at.FromJsonString(&#10;        event.data.updated_at.isoformat()&#10;    )&#10;    &#10;    if event.logo is not None:&#10;        proto_event.logo.value = event.logo&#10;&#10;    return proto_event&#10;&#10;&#10;__all__ = [&#10;    'convert_$EVENT_NAME$_event_to_proto'&#10;]&#10;" description="Proto converter" toReformat="false" toShortenFQNames="true">
    <variable name="EVENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT_NAME_CAMEL_CASE" expression="capitalize(camelCase(EVENT_NAME))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="enu" value="from enum import Enum&#10;&#10;&#10;class $FILE_NAME$(Enum):&#10;    pass&#10;&#10;&#10;__all__ = [&#10;    '$FILE_NAME$'&#10;]&#10;" description="Create custom enum class" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="comp" value="import React from 'react';&#10;import styled from 'styled-components';&#10;&#10;type Props = {&#10;    name: string;&#10;}&#10;&#10;export function $NAME$(props: Props) {&#10;    const {name} = props;&#10;    &#10;    return (&#10;        &lt;Wrapper&gt;Hej&lt;/Wrapper&gt;&#10;    );&#10;}&#10;&#10;const Wrapper = styled.div`&#10;`;&#10;" description="Create custom react componen" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="boot" value="from sanic import Sanic&#10;&#10;&#10;def initialize_$FILE_NAME$_service(app: Sanic) -&gt; $PASCAL_CASE_FILE_NAME$Service:&#10;    app.$FILE_NAME$_service = $PASCAL_CASE_FILE_NAME$Service()&#10;    return app.$FILE_NAME$_service&#10;&#10;&#10;__all__ = [&#10;    'initialize_$FILE_NAME$_service'&#10;]&#10;" description="Create custom bootstrap" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="PASCAL_CASE_FILE_NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="all" value="__all__ = [&#10;    $END$&#10;]" description="Create _all_ clause" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hoo" value="export function $FILE_NAME$() {&#10;    return {};&#10;}&#10;" description="Create custom hook" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>