usage() {
  echo "Usage: gcp [
      -s <staging project>
      -l <local project>
      -f <open firestore>
      -c <open cloud run>
      -k <open kubernetes engine>
      -d <dry run, print url>
  ]
  "
}

STAGE=false
LOCAL=false
FIRESTORE=false
CLOUD_RUN=false
DRY_RUN=false
KUBERNETES=false

while getopts ":slfrktdh" opt; do
  case "$opt" in
  's') STAGE=true ;;
  'l') LOCAL=true ;;
  'f') FIRESTORE=true ;;
  'r') CLOUD_RUN=true ;;
  'k') KUBERNETES=true ;;
  't') CLOUD_TASKS=true ;;
  'd') DRY_RUN=true ;;
  'h')
    usage
    exit
    ;;
  '?')
    echo "Invalid option $OPTARG" >&2
    usage >&2
    exit 1
    ;;
  esac
done

project() {
  [[ $STAGE == true ]] && VARIABLES_FILE=$TERRAFORM_STAGING_VARIABLES || VARIABLES_FILE=$TERRAFORM_PRODUCTION_VARIABLES
  PROJECT_NAME=$(find $PWD -name $VARIABLES_FILE | xargs grep --extended-regexp "^project_id" | cut -f3 -d' ' |  tr -d '"')

  if [[ $LOCAL == true ]]; then
    PROJECT_NAME="$PROJECT_NAME-local"
  fi

  if [[ $KUBERNETES == true ]]; then
    [[ $STAGE == true ]] && PROJECT_NAME="$KUBERNETES_PROJECT-staging" || PROJECT_NAME="$KUBERNETES_PROJECT"
  fi

  echo $PROJECT_NAME
}

url_path() {
  URL_PATH="home/dashboard"

  if [[ $FIRESTORE == true ]]; then
    URL_PATH="firestore/data"
  fi

  if [[ $CLOUD_RUN == true ]]; then
    URL_PATH="run"
  fi

  if [[ $KUBERNETES == true ]]; then
    URL_PATH="kubernetes"
  fi

  if [[ $CLOUD_TASKS == true ]]; then
    URL_PATH="cloudtasks"
  fi

  echo $URL_PATH
}

PROJECT=$(project)
URL_PATH=$(url_path)
URL="${GCP_URL}${URL_PATH}?project=$PROJECT"

if [[ $DRY_RUN == true ]]; then
  echo $URL
  exit 0
fi

open -a "Google Chrome" $URL
